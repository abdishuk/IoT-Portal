{"version":3,"sources":["views/DeviceComponents/Add_NewDevice.js"],"names":["Add_NewDevice","useState","submitted","setSubmitted","Name","Type","asset","category","gateway","model","latitude","longitude","formData","setFormdata","errors","setErrors","checked","setChecked","onsubmitHandler","e","a","preventDefault","Device","ConnectedAssetName","Gateway_Name","console","log","config","headers","newErrors","findFormErrors","Object","keys","length","axios","post","data","name","onChange","target","value","onSubmit","Group","controlId","Label","Control","type","placeholder","isInvalid","Feedback","mode","className","Check","label","onClick","variant","var","message"],"mappings":"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","file":"static/js/9.35cf027d.chunk.js","sourcesContent":["import React, { useEffect, useState } from \"react\";\r\nimport { Button, Form } from \"react-bootstrap\";\r\nimport FormContainer from \"./FormContainer\";\r\nimport axios from \"axios\";\r\nimport \"./Add_new.css\";\r\nimport { Link } from \"react-router-dom\";\r\nimport Message from \"./Message\";\r\n\r\nfunction Add_NewDevice() {\r\n  const [submitted, setSubmitted] = useState(false);\r\n\r\n  const [formData, setFormdata] = useState({\r\n    Name: \"\",\r\n    Type: \"\",\r\n    asset: \"\",\r\n    category: \"\",\r\n    gateway: \"\",\r\n    model: \"\",\r\n    latitude: \"\",\r\n    longitude: \"\",\r\n  });\r\n\r\n  const [errors, setErrors] = useState({});\r\n  const [checked, setChecked] = useState(false);\r\n\r\n  const { Name, Type, asset, category, gateway, model, latitude, longitude } =\r\n    formData;\r\n  const onsubmitHandler = async (e) => {\r\n    e.preventDefault();\r\n    const Device = {\r\n      Name,\r\n      Type,\r\n      ConnectedAssetName: asset,\r\n      category,\r\n      Gateway_Name: gateway,\r\n      model,\r\n      latitude,\r\n      longitude,\r\n    };\r\n    console.log(Device);\r\n    const config = {\r\n      headers: {\r\n        \"Content-Type\": \"application/json\",\r\n      },\r\n    };\r\n\r\n    const newErrors = findFormErrors();\r\n    // Conditional logic:\r\n    if (Object.keys(newErrors).length > 0) {\r\n      // We got errors!\r\n      setErrors(newErrors);\r\n    } else {\r\n      const { data } = await axios.post(\"/device/add_device\", Device, config);\r\n      console.log(data);\r\n\r\n      setSubmitted(true);\r\n    }\r\n  };\r\n\r\n  const findFormErrors = () => {\r\n    const newErrors = {};\r\n    // name errors\r\n    if (!Name || Name === \"\") newErrors.Name = \"Name cannot be blank!\";\r\n    else if (Name.length > 30) newErrors.name = \"name is too long!\";\r\n    // food errors\r\n    if (!Type || Type === \"\") newErrors.Type = \"select a Type!\";\r\n    // rating errors\r\n    if (!asset || asset === \"\") newErrors.asset = \"must assign an asset!\";\r\n    // comment errors\r\n    if (!category || category === \"\")\r\n      newErrors.category = \" category cannot be blank!\";\r\n    if (!model || model === \"\") newErrors.model = \" model cannot be blank!\";\r\n\r\n    if (!latitude || latitude === \"\")\r\n      newErrors.latitude = \" latitude cannot be blank!\";\r\n\r\n    if (!longitude || longitude === \"\")\r\n      newErrors.longitude = \" longitude cannot be blank!\";\r\n\r\n    return newErrors;\r\n  };\r\n\r\n  const onChange = (e) => {\r\n    setFormdata({ ...formData, [e.target.name]: e.target.value });\r\n    if (!!errors[e.target.name])\r\n      setErrors({\r\n        ...errors,\r\n        [e.target.name]: null,\r\n      });\r\n  };\r\n  console.log(checked);\r\n  const ChangeCheckStatus = () => setChecked(!checked);\r\n  return (\r\n    <>\r\n      <FormContainer>\r\n        <h1>Add New Device</h1>\r\n        <Form onSubmit={onsubmitHandler}>\r\n          <Form.Group controlId=\"Device Name\">\r\n            <Form.Label>Device Name</Form.Label>\r\n            <Form.Control\r\n              type=\"text\"\r\n              placeholder=\"Enter Device Name\"\r\n              name=\"Name\"\r\n              value={Name}\r\n              onChange={onChange}\r\n              isInvalid={!!errors.Name}\r\n            />\r\n            <Form.Control.Feedback type=\"invalid\">\r\n              {errors.Name}\r\n            </Form.Control.Feedback>\r\n          </Form.Group>\r\n          <Form.Group controlId=\"Category\">\r\n            <Form.Label>Category</Form.Label>\r\n            <Form.Control\r\n              type=\"text\"\r\n              placeholder=\"Enter Category\"\r\n              name=\"category\"\r\n              value={category}\r\n              onChange={onChange}\r\n              isInvalid={!!errors.category}\r\n            />\r\n            <Form.Control.Feedback type=\"invalid\">\r\n              {errors.category}\r\n            </Form.Control.Feedback>\r\n          </Form.Group>\r\n\r\n          <Form.Group controlId=\"Type\">\r\n            <Form.Label>Type</Form.Label>\r\n            <Form.Control\r\n              type=\"text\"\r\n              placeholder=\"Enter Type\"\r\n              name=\"Type\"\r\n              value={Type}\r\n              onChange={onChange}\r\n              isInvalid={!!errors.Type}\r\n            />\r\n            <Form.Control.Feedback type=\"invalid\">\r\n              {errors.Type}\r\n            </Form.Control.Feedback>\r\n          </Form.Group>\r\n          <Form.Group controlId=\"Connected Asset Name\">\r\n            <Form.Label>Connected Asset Name</Form.Label>\r\n            <Form.Control\r\n              type=\"text\"\r\n              placeholder=\"Enter Connected Asset Name \"\r\n              name=\"asset\"\r\n              value={asset}\r\n              isInvalid={!!errors.asset}\r\n              onChange={onChange}\r\n            />\r\n            <Form.Control.Feedback type=\"invalid\">\r\n              {errors.latitude}\r\n            </Form.Control.Feedback>\r\n          </Form.Group>\r\n\r\n          {!checked && (\r\n            <Form.Group controlId=\" Gateway Name\">\r\n              <Form.Label>Gateway Name</Form.Label>\r\n              <Form.Control\r\n                type=\"text\"\r\n                placeholder=\"Enter Gateway Name\"\r\n                name=\"gateway\"\r\n                value={gateway}\r\n                onChange={onChange}\r\n              />\r\n            </Form.Group>\r\n          )}\r\n\r\n          <Form.Group controlId=\"Enter Device's Latitude\">\r\n            <Form.Label>Latitude</Form.Label>\r\n            <Form.Control\r\n              type=\"Number\"\r\n              placeholder=\"Enter Device's Latitude\"\r\n              name=\"latitude\"\r\n              value={latitude}\r\n              isInvalid={!!errors.latitude}\r\n              onChange={onChange}\r\n            />\r\n            <Form.Control.Feedback type=\"invalid\">\r\n              {errors.latitude}\r\n            </Form.Control.Feedback>\r\n          </Form.Group>\r\n          <Form.Group controlId=\"Enter Device's Longitude\">\r\n            <Form.Label>Longitude</Form.Label>\r\n            <Form.Control\r\n              type=\"Number\"\r\n              placeholder=\"Enter Device's Longitude\"\r\n              name=\"longitude\"\r\n              value={longitude}\r\n              onChange={onChange}\r\n              isInvalid={!!errors.longitude}\r\n            />\r\n            <Form.Control.Feedback type=\"invalid\">\r\n              {errors.longitude}\r\n            </Form.Control.Feedback>\r\n          </Form.Group>\r\n\r\n          <Form.Group controlId=\"Model\">\r\n            <Form.Label>Model</Form.Label>\r\n            <Form.Control\r\n              type=\"text\"\r\n              placeholder=\"Enter Model Name\"\r\n              name=\"model\"\r\n              value={model}\r\n              isInvalid={!!errors.model}\r\n              onChange={onChange}\r\n            />\r\n            <Form.Control.Feedback type=\"invalid\">\r\n              {errors.mode}\r\n            </Form.Control.Feedback>\r\n          </Form.Group>\r\n\r\n          <Form.Group className=\"mb-3\" controlId=\"formBasicCheckbox\">\r\n            <Form.Check\r\n              type=\"checkbox\"\r\n              label=\"Is gateway\"\r\n              onClick={ChangeCheckStatus}\r\n              checked={checked}\r\n            />\r\n          </Form.Group>\r\n          <Button variant=\"primary\" type=\"submit\">\r\n            Add{\" \"}\r\n          </Button>\r\n        </Form>\r\n        {submitted && (\r\n          <Message var=\"success\" message=\"Device added successfully\" />\r\n        )}\r\n      </FormContainer>\r\n    </>\r\n  );\r\n}\r\n\r\nexport default Add_NewDevice;\r\n"],"sourceRoot":""}